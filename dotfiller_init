#!/bin/bash
DOTFILLER_HOME=$HOME/.DOTFILLER
DOTFILLER_CREATE_LINKS_SCRIPT="$(pwd)/create_links"
DOTFILLER_CREATE_LINKS_UNATTENDED_SCRIPT="$(pwd)/create_links"
#DOTFILLER_DETECT_CHANGES_SCRIPT="$(pwd)/detect_changes"
DOTFILLER_LINK_DIR_CONFIG="${DOTFILLER_HOME}/link_dir"
BASHRC_CREATE_LINKS="source "$DOTFILLER_CREATE_LINKS_UNATTENDED_SCRIPT" > /dev/null"
#BASHRC_DETECT_CHANGES="source "$DOTFILLER_DETECT_CHANGES_SCRIPT"; DOTFILLER_detect "$DOTFILLER_CREATE_LINKS_SCRIPT""

mkdir -p "${DOTFILLER_HOME}/logs"

source colors

echo -e "Welcome to ${ORANGE}DOTFILLER!${C}"
echo
echo -e "The ${BLUE}Dropbox${C} install type will install Dropbox and set it to sync a specific folder, then symlink to your home directory. \n\t${BOLD}Any${C} changes to these files will be sync'd to all machines with the Dropbox install type. \n\t(This is best for home setups or machines you trust.)\n\t(${YELLOW}Note:${C} The folder you wish to sync must be in the top level of your Dropbox directory."
#echo -e "The ${BLUE}Git${C} install type will download a Git repository and symlink files/folders in there to your home directory. \n\tThese files can be configured to sync from the upstream repository periodially, but ${BOLD}will not${C} sync local changes to Git or other machines. \n\t(This is best for machines you work on regularly, but don't want to give full access to your Dropbox to)"

PS3='Pick your installation type: '
#types=("Dropbox" "Git" "Quit")
types=("Dropbox" "Quit")
select type in "${types[@]}"; do
    case $type in
        "Dropbox")
            echo -e "Dropbox installation type selected, beginning config..."
            install_type=Dropbox
            source configure_dropbox
            break
            ;;
        # "Git")
        #     echo -e "Git installation type selected, beginning config..."
        #     install_type=Git
        #     source configure_git
        #     break
        #     ;;
        "Quit")
            echo -e "Bye!"
            exit
            ;;
        *) echo -e "Invalid option ${RED}${REPLY}${C}";;
    esac
done

do_config
read -p "Provider config complete, should we symlink your files now? [y] : " symlink_now
echo
symlink_now=${symlink_now:-y}
if [[ "$symlink_now" =~ ^[Yy]$ ]]; then
    source traverse_and_link
    run_interactive "$LINK_DIR"
    echo "$LINK_DIR" > "$DOTFILLER_LINK_DIR_CONFIG"
    echo "We're finished symlinking."
else
    echo -e "Okay!"
fi

echo -e "How should we handle new files from ${GREEN}${install_type}${C} in the future?"
echo
echo -e "${BLUE}Login${C}: This method will add a line to your ${YELLOW}~/.bashrc${C} (If it isn't already there) to create symlinks for new files when you open a new shell."
#echo -e "${BLUE}Detected Changes${C}: This method will add a line to your ${YELLOW}~/.bashrc${C} (If it isn't already there) that runs a daemon script to detect changes from your provider, and symlink new files found."
echo -e "${Blue}Manual${C}: This method will require you to run the ${YELLOW}create_links${C} script manually to add new symlinks."
PS3='Choose: '
types=("Login" "Detected Changes" "Manual")
select type in "${types[@]}"; do
    case $type in
        "Login")
            echo -e "Adding the following line to your ${YELLOW}~/.bashrc${C}: ${GREEN}${BASHRC_CREATE_LINKS}${C}"
            grep -qxF "${BASHRC_CREATE_LINKS}" "$HOME/.bashrc" > /dev/null 2>&1 || echo "${BASHRC_CREATE_LINKS}" >> "$HOME/.bashrc"
            break
            ;;
        # "Detected Changes")
        #     echo -e "Git installation type selected, beginning config..."
        #     source configure_git
        #     break
        #     ;;
        "Manual")
            echo -e "Okay! Just run ${GREEN}${DOTFILLER_CREATE_LINKS_SCRIPT}${C} whenever you need to create new symlinks."
            break
            ;;
        *) echo -e "Invalid option ${RED}${REPLY}${C}";;
    esac
done

echo
echo -e "We're ${GREEN}DONE${C} "