#!/bin/bash
exec 0</dev/tty
DOTFILLER_HOME=$HOME/.dotfiller
USER_REPO_STORE="${DOTFILLER_HOME}/repo"
OVERWRITES_FILE="${DOTFILLER_HOME}/overwrites"
OVERWRITE_FOREVER_FILE="${DOTFILLER_HOME}/overwrite_forever"
ALLKNOWNFILES_FILE="${DOTFILLER_HOME}/allknown"
DOTFILLER_LINK_DIR_CONFIG="${DOTFILLER_HOME}/link_dir"
DOTFILLER_UNATTENDED_LOGS="${DOTFILLER_HOME}/unattended.log"
DOTFILLER_DROPBOX_CONFIGURED="${DOTFILLER_HOME}/dropbox_configured"
DOTFILLER_SYNC_CONFIGURED="${DOTFILLER_HOME}/SYNC_CONFIGURED"
DOTFILLER_GIT_CONFIGURED="${DOTFILLER_HOME}/git_configured"
DOTFILLER_SYNC_FROM="${DOTFILLER_HOME}/dropbox_dir"
DOTFILLER_SYNC_TO="${DOTFILLER_HOME}/git_dir"
DOTFILLER_SYNC_LOG="${DOTFILLER_HOME}/sync.log"
# In case the user has different usernames on different machines, take advantage of ~ for the script path
SCRIPTPATH="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )/$(basename "$0")"
SCRIPTPATH=${SCRIPTPATH#"$HOME"}
SCRIPTPATH="~${SCRIPTPATH}"

dropbox=$DOTFILLER_HOME/bin/dropbox

BOLD="\\e[1m"
C="\\033[0m"
BLACK="\\033[1;30m"
BLUE="\\033[1;34m"
CYAN="\\033[1;36m"
GREEN="\\033[0;32m"
ORANGE="\\033[0;2;33m"
PURPLE="\\033[1;35m"
RED="\\033[1;31m"
VIOLET="\\033[1;35m"
WHITE="\\033[1;37m"
YELLOW="\\033[1;33m"
MAGENTA="\\033[1;31m"

if [ ! -z "$OVERWRITE_ALL_FOREVER" ]; then
    touch "$OVERWRITE_FOREVER_FILE"
fi

function _in_array() {
    local needle="$1" item
    local -n arrref="$2"
    for item in "${arrref[@]}"; do
        [[ "${item}" == "${needle}" ]] && return 0
    done
    return 1
}

function _shouldWeLink() {
    local file=${1}
    # Add every file we find to the allknown file for later cleanup of symlinks we made
    /bin/grep -qxF "${file}" "$ALLKNOWNFILES_FILE" > /dev/null 2>&1 || echo "${file}" >> "$ALLKNOWNFILES_FILE"
    if [ -f "$OVERWRITE_FOREVER_FILE" ]; then return 0; fi
    declare -a overwrites
    if [ -f "$OVERWRITES_FILE" ]; then readarray -t overwrites < "$OVERWRITES_FILE"; fi
    if _in_array "$file" "overwrites"; then return 0; fi
    if [ ! -z "$OVERWRITE_ALL" ]; then
        echo "Adding $file to $OVERWRITES_FILE"
        echo "$file" >> "$OVERWRITES_FILE"
        return 0
    fi
    if [ ! -f "$file" ]; then return 0; fi

    if [[ $INTERACTIVE -gt 0 ]]; then
        read -p "Overwrite $file ([Y]es/[N]o/[A]lways for this file/always for [E]very file this run/always for every file, even new [O]nes)? " -n 1 -r overwriteResponse
        echo
        if [[ "$overwriteResponse" =~ ^[Yy]$ ]]; then return 0; fi
        if [[ "$overwriteResponse" =~ ^[Aa]$ ]]; then
            echo "Adding $file to $OVERWRITES_FILE"
            echo "$file" >> "$OVERWRITES_FILE"
            return 0
        fi
        if [[ "$overwriteResponse" =~ ^[Ee]$ ]]; then
            OVERWRITE_ALL=1
            echo "Adding $file to $OVERWRITES_FILE"
            echo "$file" >> "$OVERWRITES_FILE"
            return 0
        fi
        if [[ "$overwriteResponse" =~ ^[Oo]$ ]]; then
            touch "$OVERWRITE_FOREVER_FILE"
            return 0
        fi
    else

        echo "$(date)- $file does not appear in $OVERWRITES_FILE, so we are not overwriting. Run \"$SCRIPTPATH links\" to interactively add overwrites." >> DOTFILLER_UNATTENDED_LOGS
    fi
    return 1
}

function _traverseLink() {
    local dir=${1%\/}
    local file
    local fileHome
    shopt -s dotglob
    for file in "$dir"/*; do
        fileHome="${HOME}${file#"$dir"}"
        if ! readlink -f "$fileHome" | /bin/grep "$file" > /dev/null && _shouldWeLink "$fileHome"; then
            # Just in case...
            if [ -d "$fileHome" ]; then mv "$fileHome" "${fileHome}.bak"; fi
            echo -e "Linking ${YELLOW}${file}${C} to ${YELLOW}${fileHome}${C}."
            logini "$DOTFILLER_UNATTENDED_LOGS" ln -sf "$file" "$fileHome"
        else
            if [[ $INTERACTIVE -gt 0 ]]; then echo "Skipping $fileHome"; fi
        fi
    done
}

function _cleanLinks() {
    local dir=${1:-$HOME}
    local line
    if [ -f "$ALLKNOWNFILES_FILE" ]; then 
        cat "$ALLKNOWNFILES_FILE" | while read -r line; do
            if [ -h "$line" -a ! -e "$line" ]; then
                unlink "$line"
            fi
        done
    fi
}

function symlink_unattended() {
    _cleanLinks
    rm "$ALLKNOWNFILES_FILE" 2> /dev/null
    arg=${1:-"$(cat "$DOTFILLER_LINK_DIR_CONFIG")"}
    _traverseLink "$arg"
}

function links() {
    INTERACTIVE=1
    symlink_unattended "$1"
}

function provider_sync_init() {
    rm "$DOTFILLER_SYNC_LOG" 2> /dev/null
    echo -e "Running a sync now..."
    sync 1
    echo -e "${YELLOW}"
    cat "$DOTFILLER_SYNC_LOG"
    echo -e "${BLUE}\nDoes the above log look correct for a sync?${C}"
    _question "PROVIDER_SYNC_SUCCESSFUL" "(y/n)? " 1
    echo
    if [[ ! "$PROVIDER_SYNC_SUCCESSFUL" =~ ^[Yy]$ ]]; then
        echo -e "${RED}ERROR${C}: Sync was not successful. Exiting as we have no way to fix that :("
    fi
    echo
    echo -e "How should we automate syncing?"
    echo
    echo -e "${BLUE}Cron${C}: This method will add a line to your ${YELLOW}crontab${C} to automatically sync and commit changes every hour, if there are any."
    echo -e "${BLUE}Manual${C}: This method will require you to run the ${YELLOW}sync${C} command manually to update the repo."
    if [ -z "$SYNC_CHOICE" ]; then
        PS3='Choose: '
        select type in Cron Manual; do
            case $type in
                "Cron")
                    sync_choice_cron
                    break
                    ;;
                # "Regular")
                #     TODO
                #     break
                #     ;;
                "Manual")
                    sync_choice_manual
                    break
                    ;;
                *) echo -e "Invalid option ${RED}${REPLY}${C}";;
            esac
        done
    else
        echo "$SYNC_CHOICE (Set by env)"
        "sync_choice_$SYNC_CHOICE"
    fi
    touch "$DOTFILLER_SYNC_CONFIGURED"
}

function sync_choice_cron() {
    DOTFILLER_SYNC_COMMAND="0 0-23 * * * $SCRIPTPATH sync"
    echo -e "Adding the following line to your ${YELLOW}crontab${C}: ${GREEN}${DOTFILLER_SYNC_COMMAND}${C}"
    ! (crontab -l | grep -q "$DOTFILLER_SYNC_COMMAND") && (crontab -l; echo "$DOTFILLER_SYNC_COMMAND") | crontab -
}

function sync_choice_manual() {
    echo -e "Okay! Just run ${GREEN}${SCRIPTPATH} sync${C} whenever you need to sync from Dropbox to Git."
}

# log if not interesting, otherwise echo
function logini() {
    local log
    local file=$1
    shift
    if ! log=$("$@" 2>&1); then 
        echo "${RED}${log}${C}"
    fi
    echo "$(date) - ${log}" >> "$file"
}

function sync() {
    if [ ! -f "$DOTFILLER_SYNC_CONFIGURED" ] && [ -z $1 ]; then
        echo "${RED}ERROR${C}: Sync hasn't been configured yet! Run ${YELLOW}${SCRIPTPATH} install${RED}.${C}"
        exit 1
    fi
    cd "$USER_REPO_STORE" > /dev/null
    logini "$DOTFILLER_SYNC_LOG" cp -r "$(cat "$DOTFILLER_SYNC_FROM")/." "$(cat "$DOTFILLER_SYNC_TO")"
    logini "$DOTFILLER_SYNC_LOG" git add .
    logini "$DOTFILLER_SYNC_LOG" git commit -m "Automatic commit $(date)"
    logini "$DOTFILLER_SYNC_LOG" git push > "$DOTFILLER_SYNC_LOG"
    cd - > /dev/null
}

function update() {
    if [ ! -f "$DOTFILLER_SYNC_CONFIGURED" ]; then
        echo "${RED}ERROR${C}: Git hasn't been configured yet! Run ${YELLOW}${SCRIPTPATH} install${RED}.${C}"
        exit 1
    fi
    _update
    links
}

function _update() {
    cd "$USER_REPO_STORE" > /dev/null
    logini "$DOTFILLER_UNATTENDED_LOGS" git pull
    cd - > /dev/null
}

function git_init() {
    [[ "$(command -v git)" ]] || { echo -e "${RED}ERROR: ${C}You should probably install ${YELLOW}git${C} first." 1>&2 ; exit 1; }
    _question "USER_GIT_REPO" "Enter the URL to your dotfile git repository (This will be passed directly to git) "
    echo
    if ! git clone "$USER_GIT_REPO" "$USER_REPO_STORE"; then
        echo -e "${RED}ERROR${C}: Git didn't seem to like that input."
        exit 1
    fi
    touch $DOTFILLER_GIT_CONFIGURED
    LINK_DIR="$USER_REPO_STORE"
    echo "$LINK_DIR" > "$DOTFILLER_SYNC_TO"
}

function git_provider_install() {
    echo -e "How should we update this ${GREEN}git${C} repo?"
    echo
    echo -e "${BLUE}Login${C}: This method will add a line to your ${YELLOW}~/.bashrc${C} (If it isn't already there) to automatically pull the repo on login."
    #echo -e "${BLUE}Regular${C}: This method will add a crontab to regularly check for new updates to the repo."
    echo -e "${Blue}Manual${C}: This method will require you to run the ${YELLOW}update${C} command manually to update the repo."
    if [ -z "$GIT_PROVIDER_UPDATE" ]; then
        PS3='Choose: '
        select type in Login Manual; do
            case $type in
                "Login")
                    git_update_login
                    break
                    ;;
                # "Regular")
                #     TODO
                #     break
                #     ;;
                "Manual")
                    git_update_manual
                    break
                    ;;
                *) echo -e "Invalid option ${RED}${REPLY}${C}";
            esac
        done
    else
        echo "$GIT_PROVIDER_UPDATE (Set by env)"
        "git_update_$GIT_PROVIDER_UPDATE"
    fi
    echo -e "${GREEN}Git setup complete.${C}"
    echo "$LINK_DIR" > "$DOTFILLER_LINK_DIR_CONFIG"
}

function git_update_login() {
    DOTFILLER_BASHRC_UPDATE_GIT="$SCRIPTPATH update &"
    echo -e "Adding the following line to your ${YELLOW}~/.bashrc${C}: ${GREEN}${DOTFILLER_BASHRC_UPDATE_GIT}${C}"
    /bin/grep "${DOTFILLER_BASHRC_UPDATE_GIT}" "$HOME/.bashrc" > /dev/null || echo "${DOTFILLER_BASHRC_UPDATE_GIT}" >> "$HOME/.bashrc"
}

function git_update_manual() {
    echo -e "Okay! Just run ${GREEN}${SCRIPTPATH} update${C} whenever you need to update the repo."
}

function _question() {
    local arg=$1
    local question=$2
    local single_char=$3
    if [ -z "${!arg}" ]; then
        local cmd="read -p ${question@Q}: "
        if [ ! -z "$single_char" ]; then
            cmd+="-n 1 "
        fi
        cmd+="-r $arg"
        eval $cmd # Naughty
        echo
    else
        echo -e "${question}: ${!arg} (Set by env)"
    fi
}

function dropbox_init() {
    if [ -d "$HOME/.dropbox" ] || [ -d "$HOME/.dropbox-dist" ] || [ -d "$HOME/Dropbox" ]; then
        echo -e "${RED}WARNING!${C} It looks like Dropbox may have already been set up, at least partially."
        _question "SKIP_DROPBOX_EXCLUSIONS" "Have you already logged into Dropbox? If yes, we won't set up exclusions. (y/n)? " 1
        echo
    fi
    cd $HOME
    if [ ! -f "$dropbox" ]; then
        echo -e "${YELLOW}Downloading Dropbox management script${C}"
        curl -L -s --create-dirs -o "$dropbox" "https://www.dropbox.com/download?dl=packages/dropbox.py"
        chmod +x $dropbox
    fi
    _question "DROPBOX_DIR" "Enter the name of the Dropbox directory you wish to sync [homedir] : "
    DROPBOX_DIR=${DROPBOX_DIR:-homedir}
    echo
    echo "${YELLOW}Checking Dropbox status...${C}"

    if $dropbox status | /bin/grep "Dropbox isn't" > /dev/null; then
    echo -e "${YELLOW}Starting Dropbox...${C}"
        echo y | $dropbox start -i
        echo -e "${YELLOW}Waiting for Dropbox startup to finish...${C}"
    fi
    sleep 3
    until $dropbox status | /bin/grep "following\|yncing\|to date" > /dev/null; do
        sleep 1
    done
    if $dropbox status | /bin/grep "following" > /dev/null; then
        echo -e "${GREEN}"
        $dropbox status
        echo -e "${YELLOW}Waiting for Dropbox to finish login${C}"
    fi
    until $dropbox status | /bin/grep "yncing\|to date" > /dev/null; do
        sleep 1
    done
    cd "$HOME/Dropbox"
    # Don't mess with the users excludes if they're already set up
    if [ -z "$SKIP_DROPBOX_EXCLUSIONS" ] || [[ "$SKIP_DROPBOX_EXCLUSIONS" =~ ^[Nn]$ ]]; then
        echo -e "${YELLOW}Excluding every Dropbox folder from syncing except for ${ORANGE}${DROPBOX_DIR}${C} ${BLUE}(This may take a few minutes depending on your connection speed and the number of files in your Dropbox)${YELLOW}...${C}"
        # Add everything to exclude
        local IFS=$'\n'
        until $dropbox status | /bin/grep "to date" > /dev/null && ! find "$HOME/Dropbox/" -mindepth 1 -not -path "*/\.*" | read; do
            for file in $(ls -1 "$HOME/Dropbox/"); do
                $dropbox exclude add "$file" > /dev/null
            done
            sleep 1
        done
        # Remove the exclusion for our symlink dir
        $dropbox exclude remove "$DROPBOX_DIR" > /dev/null
    fi
    
    echo -e "${YELLOW}Setting Dropbox to autostart${C}"
    $dropbox autostart y
    echo -e "${YELLOW}Waiting for Dropbox to sync...${C}"
    until $dropbox filestatus "$DROPBOX_DIR" | /bin/grep "to date" > /dev/null; do
        sleep 1
    done

    if [ ! -d "$DROPBOX_DIR" ]; then
        echo "${RED}Dropbox claims it's up to date, but ${ORANGE}${DROPBOX_DIR}${RED} does not exist, so something is wrong. Exiting."
        exit 1
    fi
    echo -e "${GREEN}Dropbox setup complete.${C}"
    touch $DOTFILLER_DROPBOX_CONFIGURED
    LINK_DIR="${HOME}/Dropbox/${DROPBOX_DIR}"
    echo "$LINK_DIR" > "$DOTFILLER_SYNC_FROM"
}

function dropbox_provider_install() {
    echo "$LINK_DIR" > "$DOTFILLER_LINK_DIR_CONFIG"
}

function _provider_installed() {
    _question "SYMLINK_NOW" "Provider config complete, should we symlink your files now? [y] : " 1
    echo
    SYMLINK_NOW=${SYMLINK_NOW:-y}
    if [[ "$SYMLINK_NOW" =~ ^[Yy]$ ]]; then
        links ${LINK_DIR:-"$(cat "$DOTFILLER_LINK_DIR_CONFIG")"}
        echo "We're finished symlinking."
    else
        echo "Okay!"
    fi
    echo -e "How should we handle new files from ${GREEN}${install_type}${C} in the future?"
    echo
    echo -e "${BLUE}Login${C}: This method will add a line to your ${YELLOW}~/.bashrc${C} (If it isn't already there) to create symlinks for new files when you open a new shell."
    #echo -e "${BLUE}Detected Changes${C}: This method will add a line to your ${YELLOW}~/.bashrc${C} (If it isn't already there) that runs a daemon script to detect changes from your provider, and symlink new files found."
    echo -e "${BLUE}Manual${C}: This method will require you to run the ${YELLOW}create_links${C} script manually to add new symlinks."
    if [ -z "$CREATE_LINKS_WHEN" ]; then
        PS3='Choose: '
        select type in Login Manual; do
            case $type in
                "Login")
                    create_links_login
                    break
                    ;;
                # "Detected Changes")
                #     TODO
                #     break
                #     ;;
                "Manual")
                    create_links_manual
                    break
                    ;;
                *) echo -e "Invalid option ${RED}${REPLY}${C}";;
            esac
        done
    else
        echo "$CREATE_LINKS_WHEN (Set by env)"
        "create_links_$CREATE_LINKS_WHEN"
    fi
}

function create_links_login() {
    DOTFILLER_BASHRC_CREATE_LINKS="$SCRIPTPATH symlink_unattended &"

    echo -e "Adding the following line to your ${YELLOW}~/.bashrc${C}: ${GREEN}${DOTFILLER_BASHRC_CREATE_LINKS}${C}"
    /bin/grep "${DOTFILLER_BASHRC_CREATE_LINKS}" "$HOME/.bashrc" > /dev/null || echo -e "\n${DOTFILLER_BASHRC_CREATE_LINKS}\n" >> "$HOME/.bashrc"
}

function create_links_manual() {
    echo -e "Okay! Just run ${GREEN}${SCRIPTPATH} links${C} whenever you need to create new symlinks."
}

function install() {
    echo -e "Welcome to ${ORANGE}Dotfiller!${C}"
    echo
    echo -e "The ${BLUE}Dropbox${C} install type will install Dropbox and set it to sync a specific folder, then symlink to your home directory. \n\t${BOLD}Any${C} changes to these files will be sync'd to all machines with the Dropbox install type. \n\t(This is best for home setups or machines you trust.)\n\t(${YELLOW}Note:${C} The folder you wish to sync must be in the top level of your Dropbox directory."
    echo -e "The ${BLUE}Git${C} install type will download a Git repository and symlink files/folders in there to your home directory. \n\tThese files can be configured to sync from the upstream repository periodially, but ${BOLD}will not${C} sync local changes to Git or other machines. \n\t(This is best for machines you work on regularly, but don't want to give full access to your Dropbox to)"
    echo -e "The ${BLUE}Sync${C} install type will set up syncing from Dropbox to Git. This method should generally only be installed on one machine, or you'll end up with merge problems all over the place.\n\tThis is safe to run whether you have set up Git/Dropbox or not. You will be walked through the process if you haven't."

    mkdir -p "$DOTFILLER_HOME"

    if [ -z "$INSTALL_TYPE" ]; then 
        PS3='Pick your installation type: '
        types=("Dropbox" "Git" "Sync" "Quit")
        select type in "${types[@]}"; do
            case $type in
                "Dropbox")
                    install_type_dropbox
                    break
                    ;;
                "Git")
                    install_type_git
                    break
                    ;;
                "Sync")
                    install_type_sync
                    break
                    ;;
                "Quit")
                    echo -e "Bye!"
                    exit
                    ;;
                *) echo -e "Invalid option ${RED}${REPLY}${C}";;
            esac
        done
    else
        echo "$INSTALL_TYPE (Set by env)"
        "install_type_$INSTALL_TYPE"
    fi
    echo
    echo -e "All ${GREEN}done${C}."
}

function install_type_dropbox() {
    echo -e "Dropbox installation type selected, beginning config..."
    install_type=Dropbox
    dropbox_init
    dropbox_provider_install
    _provider_installed
}

function install_type_git() {
    echo -e "Git installation type selected, beginning config..."
    install_type=Git
    git_init
    git_provider_install
    _provider_installed
}

function install_type_sync() {
    echo -e "Sync installation type selected, beginning config..."
    install_type=Sync
    if [ ! -f "$DOTFILLER_DROPBOX_CONFIGURED" ]; then
        echo -e "${BLUE}Dropbox${C} has not yet been configured, starting config now..."
        dropbox_init
    fi
    if [ ! -f "$DOTFILLER_GIT_CONFIGURED" ]; then
        echo -e "${BLUE}Git${C} has not yet been configured, starting config now..."
        git_init
    fi
    provider_sync_init
}

function help() {
    echo -e "Welcome to Dotfiller, yet another Dotfile manager. You must pass an argument to use this script. I suggest ${GREEN}$0 install${C} .
Available arguments:
        ${YELLOW}install${C} - Will guide you through installing Dotfiller with a provider
        ${YELLOW}   link${C} - Will link files from your provider to your home directory, asking questions if it needs to overwrite anything
 ${YELLOW}symlink_unattended - Above, but won't ask you questions, outputs to log ~/.dotfiller/unattended.log
             ${YELLOW}update - Pulls from a remote Git provider
               ${YELLOW}sync - Copies from Dropbox to Git, then commits any changes.
${YELLOW}_provider_installed - Runs the 'Set up automatic symlinking' prompt

Visit ${ORANGE}https://github.com/Makeshift/Dotfiller${C} for updates and issues.
    "
}

if [ -z $1 ] || [[ $1 == "h*" ]] || [[ $1 == "-h*" ]] || [[ $1 == "--h*" ]]; then
    help
    exit 1
fi
command=$1
shift
$command $@